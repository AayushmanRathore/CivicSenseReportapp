import React, { useState, useEffect } from 'react';
import { 
  MapPin, 
  Camera, 
  Mic, 
  Award, 
  Users, 
  ChevronRight, 
  Plus,
  Search,
  Filter,
  Bell,
  User,
  Navigation,
  Zap,
  Droplets,
  Car,
  Lightbulb,
  Trash2,
  CheckCircle2,
  Clock,
  AlertTriangle,
  ThumbsUp,
  ThumbsDown,
  Star,
  Truck,
  Wrench,
  Eye,
  Settings,
  Menu
} from 'lucide-react';

const CivicReportingApp = () => {
  const [activeTab, setActiveTab] = useState('home');
  const [selectedComplaint, setSelectedComplaint] = useState(null);
  const [showReportModal, setShowReportModal] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [userStats, setUserStats] = useState({
    reportsMade: 12,
    resolved: 9,
    badges: 3,
    rank: 'Civic Champion'
  });

  const categories = [
    { id: 'pothole', name: 'Pothole', icon: Car, color: 'bg-red-500' },
    { id: 'garbage', name: 'Garbage', icon: Trash2, color: 'bg-orange-500' },
    { id: 'water', name: 'Water Issue', icon: Droplets, color: 'bg-blue-500' },
    { id: 'streetlight', name: 'Street Light', icon: Lightbulb, color: 'bg-yellow-500' },
    { id: 'electricity', name: 'Power Cut', icon: Zap, color: 'bg-purple-500' },
  ];

  const complaints = [
    {
      id: 1,
      title: 'Large pothole on MG Road',
      category: 'pothole',
      status: 'resolved',
      location: 'MG Road, Near City Mall',
      timeAgo: '2 days ago',
      upvotes: 23,
      distance: '0.2 km',
      description: 'Deep pothole causing traffic issues',
      reporter: 'Amit S.',
      trackingStages: [
        { stage: 'Registered', completed: true, timestamp: '2 days ago' },
        { stage: 'Assigned', completed: true, timestamp: '1 day ago' },
        { stage: 'In Progress', completed: true, timestamp: '6 hours ago' },
        { stage: 'Resolved', completed: true, timestamp: '2 hours ago' }
      ]
    },
    {
      id: 2,
      title: 'Overflowing garbage bin',
      category: 'garbage',
      status: 'in-progress',
      location: 'Sector 15, Block A',
      timeAgo: '4 hours ago',
      upvotes: 8,
      distance: '0.8 km',
      description: 'Community garbage bin overflowing for 3 days',
      reporter: 'Priya M.',
      trackingStages: [
        { stage: 'Registered', completed: true, timestamp: '4 hours ago' },
        { stage: 'Assigned', completed: true, timestamp: '2 hours ago' },
        { stage: 'In Progress', completed: true, timestamp: '30 mins ago' },
        { stage: 'Resolved', completed: false, timestamp: null }
      ]
    },
    {
      id: 3,
      title: 'Broken street light',
      category: 'streetlight',
      status: 'assigned',
      location: 'Park Street, Gate No. 3',
      timeAgo: '1 hour ago',
      upvotes: 5,
      distance: '1.2 km',
      description: 'Street light not working since last week',
      reporter: 'Raj K.',
      trackingStages: [
        { stage: 'Registered', completed: true, timestamp: '1 hour ago' },
        { stage: 'Assigned', completed: true, timestamp: '15 mins ago' },
        { stage: 'In Progress', completed: false, timestamp: null },
        { stage: 'Resolved', completed: false, timestamp: null }
      ]
    }
  ];

  const getStatusColor = (status) => {
    switch(status) {
      case 'registered': return 'bg-gray-500';
      case 'assigned': return 'bg-blue-500';
      case 'in-progress': return 'bg-orange-500';
      case 'resolved': return 'bg-green-500';
      default: return 'bg-gray-500';
    }
  };

  const getStatusIcon = (status) => {
    switch(status) {
      case 'registered': return Clock;
      case 'assigned': return User;
      case 'in-progress': return Wrench;
      case 'resolved': return CheckCircle2;
      default: return Clock;
    }
  };

  const getCategoryIcon = (categoryId) => {
    const category = categories.find(c => c.id === categoryId);
    return category ? category.icon : AlertTriangle;
  };

  const getCategoryColor = (categoryId) => {
    const category = categories.find(c => c.id === categoryId);
    return category ? category.color : 'bg-gray-500';
  };

  const HomeScreen = () => (
    <div className="flex-1 overflow-y-auto">
      {/* Header with stats */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-white">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-2xl font-bold">Good Evening, Rahul!</h1>
            <p className="opacity-90">Making your city better, one report at a time</p>
          </div>
          <div className="relative">
            <Bell className="w-6 h-6" />
            <div className="absolute -top-2 -right-2 bg-red-500 rounded-full w-5 h-5 flex items-center justify-center text-xs">3</div>
          </div>
        </div>
        
        <div className="grid grid-cols-3 gap-4">
          <div className="text-center">
            <div className="text-2xl font-bold">{userStats.reportsMade}</div>
            <div className="text-sm opacity-90">Reports Made</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold">{userStats.resolved}</div>
            <div className="text-sm opacity-90">Resolved</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold">{userStats.badges}</div>
            <div className="text-sm opacity-90">Badges Earned</div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="p-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold">Quick Report</h2>
          <button className="text-blue-600 text-sm">View All</button>
        </div>
        
        <div className="grid grid-cols-3 gap-3 mb-6">
          {categories.slice(0, 6).map(category => {
            const IconComponent = category.icon;
            return (
              <button
                key={category.id}
                onClick={() => {
                  setSelectedCategory(category);
                  setShowReportModal(true);
                }}
                className="flex flex-col items-center p-4 bg-white rounded-xl shadow-sm border hover:shadow-md transition-shadow"
              >
                <div className={`${category.color} p-3 rounded-full mb-2`}>
                  <IconComponent className="w-6 h-6 text-white" />
                </div>
                <span className="text-xs font-medium text-gray-700">{category.name}</span>
              </button>
            );
          })}
        </div>

        {/* Recent Complaints */}
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold">Nearby Issues</h2>
          <div className="flex gap-2">
            <button className="p-2 bg-gray-100 rounded-lg">
              <Filter className="w-4 h-4" />
            </button>
            <button className="p-2 bg-gray-100 rounded-lg">
              <Navigation className="w-4 h-4" />
            </button>
          </div>
        </div>

        <div className="space-y-3">
          {complaints.map(complaint => {
            const CategoryIcon = getCategoryIcon(complaint.category);
            const StatusIcon = getStatusIcon(complaint.status);
            
            return (
              <div 
                key={complaint.id}
                onClick={() => setSelectedComplaint(complaint)}
                className="bg-white rounded-xl p-4 shadow-sm border hover:shadow-md transition-shadow cursor-pointer"
              >
                <div className="flex items-start gap-3">
                  <div className={`${getCategoryColor(complaint.category)} p-2 rounded-lg`}>
                    <CategoryIcon className="w-5 h-5 text-white" />
                  </div>
                  
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-1">
                      <h3 className="font-medium text-gray-900">{complaint.title}</h3>
                      <div className="flex items-center gap-1">
                        <ThumbsUp className="w-4 h-4 text-green-600" />
                        <span className="text-sm text-gray-600">{complaint.upvotes}</span>
                      </div>
                    </div>
                    
                    <p className="text-sm text-gray-600 mb-2">{complaint.location}</p>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs text-white ${getStatusColor(complaint.status)}`}>
                          <StatusIcon className="w-3 h-3" />
                          {complaint.status.charAt(0).toUpperCase() + complaint.status.slice(1).replace('-', ' ')}
                        </div>
                        <span className="text-xs text-gray-500">{complaint.distance} away</span>
                      </div>
                      <span className="text-xs text-gray-500">{complaint.timeAgo}</span>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );

  const ProfileScreen = () => (
    <div className="flex-1 overflow-y-auto bg-gray-50">
      {/* Profile Header */}
      <div className="bg-gradient-to-r from-green-600 to-blue-600 p-6 text-white">
        <div className="flex items-center gap-4 mb-6">
          <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center">
            <User className="w-8 h-8" />
          </div>
          <div>
            <h1 className="text-2xl font-bold">Rahul Sharma</h1>
            <p className="opacity-90">{userStats.rank}</p>
            <div className="flex items-center gap-2 mt-1">
              <Star className="w-4 h-4 text-yellow-400" />
              <span className="text-sm">Level 3 Contributor</span>
            </div>
          </div>
        </div>
        
        <div className="grid grid-cols-4 gap-4 text-center">
          <div>
            <div className="text-2xl font-bold">{userStats.reportsMade}</div>
            <div className="text-xs opacity-90">Total Reports</div>
          </div>
          <div>
            <div className="text-2xl font-bold">{userStats.resolved}</div>
            <div className="text-xs opacity-90">Resolved</div>
          </div>
          <div>
            <div className="text-2xl font-bold">75%</div>
            <div className="text-xs opacity-90">Success Rate</div>
          </div>
          <div>
            <div className="text-2xl font-bold">#{Math.floor(Math.random() * 50) + 1}</div>
            <div className="text-xs opacity-90">City Rank</div>
          </div>
        </div>
      </div>

      {/* Achievements */}
      <div className="p-4">
        <h2 className="text-lg font-semibold mb-4">Achievements</h2>
        <div className="grid grid-cols-2 gap-3 mb-6">
          <div className="bg-white p-4 rounded-xl shadow-sm border">
            <div className="flex items-center gap-3">
              <div className="bg-yellow-500 p-2 rounded-lg">
                <Award className="w-5 h-5 text-white" />
              </div>
              <div>
                <h3 className="font-medium">First Reporter</h3>
                <p className="text-xs text-gray-600">Made your first report</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-4 rounded-xl shadow-sm border">
            <div className="flex items-center gap-3">
              <div className="bg-green-500 p-2 rounded-lg">
                <CheckCircle2 className="w-5 h-5 text-white" />
              </div>
              <div>
                <h3 className="font-medium">Problem Solver</h3>
                <p className="text-xs text-gray-600">10 reports resolved</p>
              </div>
            </div>
          </div>
        </div>

        {/* Recent Activity */}
        <h2 className="text-lg font-semibold mb-4">Recent Activity</h2>
        <div className="space-y-3">
          {complaints.slice(0, 3).map(complaint => {
            const CategoryIcon = getCategoryIcon(complaint.category);
            
            return (
              <div key={complaint.id} className="bg-white rounded-xl p-4 shadow-sm border">
                <div className="flex items-center gap-3">
                  <div className={`${getCategoryColor(complaint.category)} p-2 rounded-lg`}>
                    <CategoryIcon className="w-4 h-4 text-white" />
                  </div>
                  <div className="flex-1">
                    <h3 className="font-medium">{complaint.title}</h3>
                    <p className="text-sm text-gray-600">{complaint.location}</p>
                  </div>
                  <div className={`px-2 py-1 rounded-full text-xs text-white ${getStatusColor(complaint.status)}`}>
                    {complaint.status.replace('-', ' ')}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );

  const ReportModal = () => (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-2xl w-full max-w-md max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold">Report Issue</h2>
            <button 
              onClick={() => setShowReportModal(false)}
              className="p-2 hover:bg-gray-100 rounded-lg"
            >
              ×
            </button>
          </div>

          {selectedCategory && (
            <div className="mb-6">
              <div className="flex items-center gap-3 p-4 bg-gray-50 rounded-xl">
                <div className={`${selectedCategory.color} p-3 rounded-full`}>
                  <selectedCategory.icon className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h3 className="font-medium">{selectedCategory.name}</h3>
                  <p className="text-sm text-gray-600">Selected category</p>
                </div>
              </div>
            </div>
          )}

          {/* Photo/Video Upload */}
          <div className="mb-6">
            <label className="block text-sm font-medium mb-2">Add Photo/Video</label>
            <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-blue-500 transition-colors cursor-pointer">
              <Camera className="w-12 h-12 text-gray-400 mx-auto mb-2" />
              <p className="text-gray-600">Tap to capture or upload</p>
              <p className="text-xs text-gray-500 mt-1">Auto-location will be captured</p>
            </div>
          </div>

          {/* Description */}
          <div className="mb-6">
            <label className="block text-sm font-medium mb-2">Description</label>
            <div className="relative">
              <textarea 
                className="w-full p-3 border rounded-xl resize-none"
                rows="3"
                placeholder="Describe the issue..."
              />
              <button className="absolute bottom-2 right-2 p-2 text-blue-600 hover:bg-blue-50 rounded-lg">
                <Mic className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* Location */}
          <div className="mb-6">
            <div className="flex items-center gap-2 p-3 bg-green-50 rounded-xl">
              <MapPin className="w-5 h-5 text-green-600" />
              <div>
                <p className="font-medium text-green-800">Current Location</p>
                <p className="text-sm text-green-700">MG Road, Sector 14, Jaipur</p>
              </div>
            </div>
          </div>

          {/* Submit Button */}
          <button className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 rounded-xl font-medium hover:opacity-90 transition-opacity">
            Submit Report
          </button>
        </div>
      </div>
    </div>
  );

  const ComplaintDetailModal = () => {
    if (!selectedComplaint) return null;
    
    return (
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl w-full max-w-md max-h-[90vh] overflow-y-auto">
          <div className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-bold">Issue Details</h2>
              <button 
                onClick={() => setSelectedComplaint(null)}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                ×
              </button>
            </div>

            {/* Issue Header */}
            <div className="flex items-start gap-3 mb-6">
              <div className={`${getCategoryColor(selectedComplaint.category)} p-3 rounded-lg`}>
                {React.createElement(getCategoryIcon(selectedComplaint.category), { className: "w-6 h-6 text-white" })}
              </div>
              <div className="flex-1">
                <h3 className="font-bold text-lg">{selectedComplaint.title}</h3>
                <p className="text-gray-600 mb-2">{selectedComplaint.description}</p>
                <div className="flex items-center gap-2 text-sm text-gray-500">
                  <MapPin className="w-4 h-4" />
                  {selectedComplaint.location}
                </div>
              </div>
            </div>

            {/* Progress Tracker */}
            <div className="mb-6">
              <h4 className="font-medium mb-4">Progress Tracking</h4>
              <div className="space-y-4">
                {selectedComplaint.trackingStages.map((stage, index) => (
                  <div key={index} className="flex items-center gap-3">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                      stage.completed ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-400'
                    }`}>
                      {stage.completed ? (
                        <CheckCircle2 className="w-4 h-4" />
                      ) : (
                        <Clock className="w-4 h-4" />
                      )}
                    </div>
                    <div className="flex-1">
                      <p className={`font-medium ${stage.completed ? 'text-gray-900' : 'text-gray-500'}`}>
                        {stage.stage}
                      </p>
                      {stage.timestamp && (
                        <p className="text-xs text-gray-500">{stage.timestamp}</p>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Reporter Info */}
            <div className="mb-6 p-3 bg-gray-50 rounded-xl">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Reported by</p>
                  <p className="font-medium">{selectedComplaint.reporter}</p>
                </div>
                <div className="text-right">
                  <p className="text-sm text-gray-600">Upvotes</p>
                  <div className="flex items-center gap-1">
                    <ThumbsUp className="w-4 h-4 text-green-600" />
                    <span className="font-medium">{selectedComplaint.upvotes}</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="grid grid-cols-2 gap-3">
              <button className="flex items-center justify-center gap-2 p-3 border border-green-600 text-green-600 rounded-xl hover:bg-green-50">
                <ThumbsUp className="w-4 h-4" />
                Support
              </button>
              <button className="flex items-center justify-center gap-2 p-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700">
                <Eye className="w-4 h-4" />
                Follow
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="max-w-md mx-auto bg-gray-100 min-h-screen flex flex-col">
      {/* Main Content */}
      {activeTab === 'home' && <HomeScreen />}
      {activeTab === 'profile' && <ProfileScreen />}

      {/* Floating Action Button */}
      <button 
        onClick={() => setShowReportModal(true)}
        className="fixed bottom-20 right-4 bg-gradient-to-r from-orange-500 to-red-500 text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-shadow z-40"
      >
        <Plus className="w-6 h-6" />
      </button>

      {/* Bottom Navigation */}
      <div className="bg-white border-t px-4 py-2 flex justify-around">
        <button 
          onClick={() => setActiveTab('home')}
          className={`flex flex-col items-center py-2 px-4 rounded-lg transition-colors ${
            activeTab === 'home' ? 'bg-blue-50 text-blue-600' : 'text-gray-600'
          }`}
        >
          <MapPin className="w-5 h-5 mb-1" />
          <span className="text-xs">Home</span>
        </button>
        
        <button 
          onClick={() => setActiveTab('reports')}
          className={`flex flex-col items-center py-2 px-4 rounded-lg transition-colors ${
            activeTab === 'reports' ? 'bg-blue-50 text-blue-600' : 'text-gray-600'
          }`}
        >
          <Search className="w-5 h-5 mb-1" />
          <span className="text-xs">My Reports</span>
        </button>
        
        <button 
          onClick={() => setActiveTab('leaderboard')}
          className={`flex flex-col items-center py-2 px-4 rounded-lg transition-colors ${
            activeTab === 'leaderboard' ? 'bg-blue-50 text-blue-600' : 'text-gray-600'
          }`}
        >
          <Award className="w-5 h-5 mb-1" />
          <span className="text-xs">Rankings</span>
        </button>
        
        <button 
          onClick={() => setActiveTab('profile')}
          className={`flex flex-col items-center py-2 px-4 rounded-lg transition-colors ${
            activeTab === 'profile' ? 'bg-blue-50 text-blue-600' : 'text-gray-600'
          }`}
        >
          <User className="w-5 h-5 mb-1" />
          <span className="text-xs">Profile</span>
        </button>
      </div>

      {/* Modals */}
      {showReportModal && <ReportModal />}
      {selectedComplaint && <ComplaintDetailModal />}
    </div>
  );
};

export default CivicReportingApp;
